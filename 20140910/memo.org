* linux-0.01-rm の移植
** Kernel panic: Unexpected HD interrupt
出させているのは
kernel/hd.c(235): void unexpected_hd_interrupt(void)

これを呼んでいるのは
kernel/system_call.s(218): 	movl $unexpected_hd_interrupt,%eax
のみ

system_call.sで218行目が実行されるのは、
217行目の
#+BEGIN_EXAMPLE
	jne 1f
#+END_EXAMPLE
(ZF == 0のときshortジャンプ)
が実行されなかったから
したがって、ZF == 1

ということは、
216行目の
#+BEGIN_EXAMPLE
	testl %eax,%eax
#+END_EXAMPLE
は、
| %eaxの値 | ZF |
|----------+----|
| 0        |  1 | <= こっち
| 0以外    |  0 |
なので、%eaxの値は0

ということは、
215行目の
#+BEGIN_EXAMPLE
	movl do_hd,%eax
#+END_EXAMPLE
(do_hd -> %eax)
のとき、do_hdは0

*** do_hdを0にしている原因はどこか？
grepするとdo_hdは、
#+BEGIN_EXAMPLE
/kernel/hd.c:156:void (*do_hd)(void) = NULL;
#+END_EXAMPLE
で定義されており、
do_hdへ代入している箇所は
#+BEGIN_EXAMPLE
/kernel/hd.c:187:	do_hd = intr_addr;
/kernel/hd.c:307:		do_hd=NULL;
#+END_EXAMPLE
の2箇所のみ。

/kernel/hd.cを見てみると、
156行目の定義はグローバル変数。
#+BEGIN_EXAMPLE
/*
 * This is the pointer to a routine to be executed at every hd-interrupt.
 * Interesting way of doing things, but should be rather practical.
 */
void (*do_hd)(void) = NULL;
#+END_EXAMPLE
併記のコメントは、意訳すると
#+BEGIN_EXAMPLE
これはhd割り込み毎に実行されるルーチンへのポインタ
面白いやり方、だがかなり実践的(?)
#+END_EXAMPLE

また、187行目と307行目の代入箇所は、
それぞれ以下の関数の中
| 行番号 | 関数名     | 実行条件                         |
|--------+------------+----------------------------------|
|    187 | hd_out     | なし(関数に入れば必ず実行される) |
|    307 | do_request | グローバル変数this_request == 0  |

do_request()の
#+BEGIN_SRC C
	if (!this_request) {
		do_hd=NULL;
		return;
	}
#+END_SRC
の箇所は、アセンブラで
#+BEGIN_SRC as
    8a27:       a1 48 6c 01 00          mov    0x16c48,%eax
    8a2c:       85 c0                   test   %eax,%eax
    8a2e:       75 0b                   jne    8a3b <do_request+0x21>
    8a30:       c7 05 40 67 01 00 00    movl   $0x0,0x16740
    8a37:       00 00 00 
    8a3a:       c3                      ret
#+END_SRC
なので、NULL == 0

なので、do_request()はdo_hdを0にしている容疑者の一人

あと、do_hdはNULLで初期化されているので、
「初期化されてから1度も値を代入されていない」
も、容疑者の一人

あと、hd_out()は一番最後の引数「void (*intr_addr)(void)」を
do_hdへ代入しているので、呼ばれ方によっては容疑者に成りうる。

M-r(global -r)で探すと以下の3つ
#+BEGIN_EXAMPLE
hd_out            232 kernel/hd.c      	hd_out(nr,_SECT,_SECT,_HEAD-1,_CYL,WIN_SPECIFY,&do_request);
hd_out            311 kernel/hd.c      		hd_out(this_request->hd,this_request->nsector,this_request->
hd_out            323 kernel/hd.c      		hd_out(this_request->hd,this_request->nsector,this_request->
#+END_EXAMPLE
global -gやgrepで探してもコレ以上はヒットしない
(アセンブリコードで呼ばれたりはしていない)

見てみると、これら3つはどれも実際に存在する関数のポインタを渡しているので、
仮引数intr_addrは0にはならない

とは思うが、一応アセンブラを見てみよう

まずは一つ目の
232 kernel/hd.c      	hd_out(nr,_SECT,_SECT,_HEAD-1,_CYL,WIN_SPECIFY,&do_request);

アセンブラをojbdumpとかで見るときは、リンクも済んでいる
tools/system
を見る。

そもそも、hd_out()は呼ばれた時にどのように引数を受け取っているのか？
それを調べないと、呼んでいる側のどのような代入処理がhd_out()内のdo_hdへの代入に
対応するかがわからない。

#+BEGIN_SRC sh
$ objdump -x tools/system | grep do_hd
00016740 g     O .bss   00000004 do_hd
#+END_SRC
do_hdのアドレスは0x00016740

hd_out()の中で最初の0x16740への書き込みを探すと
#+BEGIN_SRC as
    88ac:       8b 44 24 3c             mov    0x3c(%esp),%eax
    88b0:       a3 40 67 01 00          mov    %eax,0x16740
#+END_SRC
スタックに積まれている値(intr_addr)を、%eaxへ書き込み、
%eaxの値を0x16740(do_hd)へ書き込んでいる

関数先頭
0000886c <hd_out>:
からのスタックポインタ(%esp)の動きを見てみる

hd_out()先頭からdo_hdへの代入までの全貌は以下のとおり
#+BEGIN_SRC as
0000886c <hd_out>:
    886c:       55                      push   %ebp
    886d:       57                      push   %edi
    886e:       56                      push   %esi
    886f:       53                      push   %ebx
    8870:       83 ec 1c                sub    $0x1c,%esp
    8873:       89 c6                   mov    %eax,%esi
    8875:       89 d7                   mov    %edx,%edi
    8877:       89 cd                   mov    %ecx,%ebp
    8879:       8b 5c 24 30             mov    0x30(%esp),%ebx
    887d:       83 fb 0f                cmp    $0xf,%ebx
    8880:       77 05                   ja     8887 <hd_out+0x1b>
    8882:       83 f8 01                cmp    $0x1,%eax
    8885:       76 0c                   jbe    8893 <hd_out+0x27>
    8887:       c7 04 24 c8 f5 00 00    movl   $0xf5c8,(%esp)
    888e:       e8 05 dc ff ff          call   6498 <panic>
    8893:       b9 e7 03 00 00          mov    $0x3e7,%ecx
    8898:       ba f7 01 00 00          mov    $0x1f7,%edx
    889d:       eb 05                   jmp    88a4 <hd_out+0x38>
    889f:       83 e9 01                sub    $0x1,%ecx
    88a2:       74 6e                   je     8912 <hd_out+0xa6>
    88a4:       ec                      in     (%dx),%al
    88a5:       83 e0 c0                and    $0xffffffc0,%eax
    88a8:       3c 40                   cmp    $0x40,%al
    88aa:       75 f3                   jne    889f <hd_out+0x33>
    88ac:       8b 44 24 3c             mov    0x3c(%esp),%eax
    88b0:       a3 40 67 01 00          mov    %eax,0x16740
#+END_SRC

まず、
#+BEGIN_SRC as
    886c:       55                      push   %ebp
    886d:       57                      push   %edi
    886e:       56                      push   %esi
    886f:       53                      push   %ebx
#+END_SRC
では、

*** do_hd -> %eaxが実行されるのは何時か？
どのタイミングで(あるいは何が起きたら)
kernel/system_call.s(215): movl do_hd,%eax
が実行されるのか？
- これが実行されるときにdo_hd==0ならば、
  あとは無条件に Kernel panic: Unexpected HD interrupt まで行き着く
