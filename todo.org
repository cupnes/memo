* やりたいことリスト
** Linuxカーネルデバッグ環境構築
*** 目的
- 小崎(ガチャピン)さんがインタビューで答えていた
   「動的デバッグ」の環境を作る

**** 参考
-- カーネルハッカー・小崎資広の「コードを読む技術」 | サイボウズ式
--- http://cybozushiki.cybozu.co.jp/articles/m000316.html
#+BEGIN_EXAMPLE
小崎: ソースコードは頭から読むようにできていないんです。
      頭から読むのは、学生の頃にやって失敗しまくった。要するに心が乱れるんですよ。
      本は前から読むように最適化されるんだけど、それは著者がそうなるように頑張ってるからなんです。
      生の情報は最適化されていないんです。だから、ソースコードを本のように読むのは、かなり非効率な読み方なんです。

西尾: なるほど、本と違って前から読むように整理されてないから、違う読み方が必要だ、と。

小崎: なので、タグジャンプを使ってトップダウンやボトムアップで読むか、
      デバッガーで実行順序で読むか、Gitとかを使って時系列で見るか、が三大流派です。
#+END_EXAMPLE

*** やること(デバッガーで実行順序で読む)
- QEMU+GDBでデバッグできるようにする
-- 1. デバッグできるようにLinuxカーネルをコンパイル
-- 2. QEMU側の設定
--- カーネル起動オプション(パラメータ)にルートファイルシステムを指定する必要がある
---- ルートファイルシステムが見つからない旨のカーネルパニックが発生する
---- デバッグ用の仮のルートファイルシステムはどう用意すれば良いか？
-- 3. GDBの設定

- その他のデバッグ手法
-- Linux のデバッグ手法をマスターする
--- http://www.ibm.com/developerworks/jp/linux/library/l-debug/
--- strace
--- gdb
--- kgdb
--- Oops分析
--- kdb
--- magic key sequence

**** 参考
- QEMU上のLinuxカーネルをGDBでデバッグする - Narrow Escape
-- http://hiroom2.jimdo.com/2014/01/15/qemu%E4%B8%8A%E3%81%AElinux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%92gdb%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B/

*** その他に
**** Gitとかを使って時系列で見る
- コミットログを追えるように

***** 参考
- Linuxカーネルのソースツリーについて
-- Linuxカーネルをコンパイルする | コンピュータ忘備録
--- http://c0lvlput3r.blogspot.jp/2013/05/compiling-linux-kernel-on-ubuntu.html

**** タグジャンプを使ってトップダウンやボトムアップで読む
- 静的デバッグがすぐ行えるように
-- カーネルソースが入っているディレクトリのgtagsコマンドはcronで自動的に走らせる
-- emacs上でgtagsの更新ができるように

***** 参考
- Emacs - GNU Global のタグファイル自動更新 - Qiita
-- http://qiita.com/hayamiz/items/8e8c7fca64b4810d8e78

*** カーネルビルドサーバ
- 以下の2つをやったらビルドしてくれる
-- ソースの場所を指定
--- GitリポジトリのURL
--- tarアーカイブ圧縮ファイルのURL
-- .configを渡す
--- olddefconfigしてビルドしてくれる
** オリジナルのメモリアロケータ(malloc)実装
*** 考えてること
- どれだけのメモリサイズを貸したかだけ覚えている
- 誰(どのプロセス)に貸したかは覚えていない

- 「貸出中(rented)」と「返却済み(available)」のメモリプールは構造体「struct mem_control_block」のリンクリストで管理
-- struct mem_control_blockのメンバ
--- unsigned int size
---- サイズ[バイト]
----- mem_control_blockを含まない、データ領域のサイズ
--- struct mem_control_block *next
---- 次の要素へのポインタ
----- 次の要素のmem_control_blockの先頭アドレス
---- 指すべき要素が無ければNULL

- インタフェース
-- void *malloc(size_t size)
--- 引数sizeが連続領域で入るブロックがavailableのリストにあるかチェック
---- [あれば]
----- 見つけたブロックのサイズ > 引数size であれば、見つけたブロックを分割
----- 貸し出すブロックをavailableからrentedへ移動
----- 貸し出すブロックのデータ領域先頭アドレスを返す
---- [無ければ]
----- (sizeof(struct mem_control_block) + size)バイトの領域を確保
------ まずは、sbrk()で
------ brk()、mmap()、mmap2()でも可能か
----- 新たに確保した領域のmem_control_blockを初期化
------ size: 引数size
------ next: NULL
----- rentedの最後に新たに確保したブロックを追加
-- void free(void *ptr)
--- (ptr - sizeof(struct mem_control_block))と開始アドレスが一致するブロックをrentedから検索
---- next要素と比較していき、一致したnext要素を持つブロックが指している先のブロックが該当ブロック
--- 見つけたブロックをavailableへ移動
---- アドレス順に並ぶように追加する
---- 隣接ブロックであれば統合する
----- 隣接ブロックであるかどうかは以下で調べられる
#+BEGIN_SRC c -n
/* mcbはstruct mem_control_block */
if ((unsigned char *)mcb.next == (unsigned char *)&mcb + sizeof(struct mem_control_block) + mcb.size) {
	/* 隣接している */
} else {
	/* 隣接していない */
}
#+END_SRC
